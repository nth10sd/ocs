# For more information on GitHub Actions for Python projects, see: https://git.io/JtENw

name: pytest

on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: "5 4,10,16,22 * * *"
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  Linux:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
        build-type:
          [
            "",
            "--enable-address-sanitizer",
            "--enable-debug",
            "--enable-debug --disable-optimize --enable-oom-breakpoint --disable-profiling",
            "--enable-valgrind",
          ]
        os: ["ubuntu-24.04", "ubuntu-24.04-arm"]
        include:
          - os: "ubuntu-24.04"
            build-type: "--enable-debug --disable-optimize --enable-simulator=arm64"
            python-version: "3.11"
          - os: "ubuntu-24.04"
            build-type: "--disable-debug --enable-simulator=arm64"
            python-version: "3.11"
          - os: "ubuntu-24.04"
            build-type: "--enable-32bit"
            python-version: "3.11"
          - os: "ubuntu-24.04"
            build-type: "--enable-debug --disable-optimize --enable-32bit"
            python-version: "3.11"
          - os: "ubuntu-24.04"
            build-type: "--enable-debug --disable-optimize --enable-simulator=arm --enable-32bit"
            python-version: "3.11"
    env:
      # From https://docs.astral.sh/uv/guides/integration/github/#caching
      UV_CACHE_DIR: /tmp/.uv-cache
      UV_SYSTEM_PYTHON: 1
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      # uv pip cache dependencies to save time
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('requirements.txt') }}
            uv-${{ runner.os }}-${{ runner.arch }}-
            uv-${{ runner.os }}-
      - name: Use deploy key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: |
            ${{ secrets.CRASH2COV_TOKEN }}
            ${{ secrets.ZZBASE_TOKEN }}

      - name: Install uv
        shell: bash
        run: python -u -m pip install --upgrade uv=="$(python -u -c 'from pathlib import Path;print(list(set([x for x in Path("pyproject.toml").read_text(encoding="utf-8").splitlines() if "uv >= " in x]))[0].split("# ", maxsplit=1)[0].strip().split("\"")[1].removeprefix("uv >= "))')"
      - name: Remove subdomain to make requirements.txt setup work in CI
        run: python -c 'import fileinput; [print(line.partition("git@")[0] + "git@github.com/" + line.partition(".github.com/")[-1] if (".github.com/" in line and not line.startswith("#")) else line, end="") for line in fileinput.input(inplace=True)]' requirements.txt
      - name: Print differences in git repository needed to make CI work
        run: git diff
      - name: Install requirements from possibly-changed requirements.txt, and package in development mode
        run: uv pip install -r requirements.txt -e .
      - name: Revert requirements.txt if changed
        run: git checkout -- requirements.txt

      - name: Run with ruff
        run: python -u -m ruff check
      - name: Run with ty
        run: python -u -m ty check --error-on-warning
      - name: Run basedpyright
        run: python -u -m basedpyright
      - name: Run with refurb to find code that can be written in a more modern way
        run: uvx --with-requirements=pyproject.toml refurb --ignore FURB110 .

      - name: Set Linux environment variables
        run: |
          echo "LLVM_CONFIG=/usr/lib/llvm-$(pushd /usr/lib/ > /dev/null ; ls -d llvm-*/ | tail -n 1 | sed 's/.$//' | cut -d "-" -f 2 ; popd > /dev/null;)/bin/llvm-config" >> $GITHUB_ENV ;
          echo "LLVM_SYMBOLIZER=/usr/lib/llvm-$(pushd /usr/lib/ > /dev/null ; ls -d llvm-*/ | tail -n 1 | sed 's/.$//' | cut -d "-" -f 2 ; popd > /dev/null;)/bin/llvm-symbolizer" >> $GITHUB_ENV ;
          echo "SHELL=/bin/bash" >> $GITHUB_ENV ;
      - name: Set Linux llvm-config and llvm-symbolizer symlinks
        run: sudo ln -s /usr/lib/llvm-$(pushd /usr/lib/ > /dev/null ; ls -d llvm-*/ | tail -n 1 | sed 's/.$//' | cut -d "-" -f 2 ; popd > /dev/null;)/bin/llvm-config /usr/bin/llvm-config && sudo ln -s /usr/lib/llvm-$(pushd /usr/lib/ > /dev/null ; ls -d llvm-*/ | tail -n 1 | sed 's/.$//' | cut -d "-" -f 2 ; popd > /dev/null;)/bin/llvm-symbolizer /usr/bin/llvm-symbolizer
      - name: Check versions
        run: gcc --version; g++ --version; clang --version; clang++ --version; llvm-symbolizer --version; llvm-config --version

      - name: Install 64-bit SpiderMonkey prerequisites
        run: sudo apt-get update ; sudo apt-get install ccache libclang1-$(pushd /usr/lib/ > /dev/null ; ls -d llvm-*/ | tail -n 1 | sed 's/.$//' | cut -d "-" -f 2 ; popd > /dev/null;) mercurial ripgrep
      - name: Run with pyrefly and print out differences if any (Can be removed when pyrefly matures)
        run: rg -t py --files | xargs pyrefly check --remove-unused-ignores ; git diff ; git checkout -- .
      - name: Install Valgrind for some builds
        if: matrix.build-type == '--enable-valgrind'
        run: sudo apt-get install valgrind
      - name: Install 32-bit prerequisites for some builds, only on x86_64 hosts
        if: contains('["--enable-32bit", "--enable-debug --disable-optimize --enable-32bit", "--enable-debug --disable-optimize --enable-simulator=arm --enable-32bit",]', matrix.build-type)
        run: if uname -m | grep -q 'x86_64' ; then sudo apt-get install g++-multilib lib32z1-dev libc6-dev-i386 ; fi
      - name: List free space
        run: df -h
      - name: Remove unneeded browsers, only on x86_64 hosts
        run: if uname -m | grep -q 'x86_64' ; then sudo apt-get remove google-chrome-stable microsoft-edge-stable ; fi
      - name: Run apt-get autoremove and apt-get clean
        run: sudo apt-get autoremove ; sudo apt-get clean
      - name: List free space again
        run: df -h
      - name: Search for existing linter ignore lines in Python
        run: |
          rg -t py --stats "(?:(?:flake8|noqa|pylint|pyrefly|pyright|ty|type|vulture): *(?:disable|ignore|noqa|[a-zA-Z]+[0-9]+)| Any|REPLACEME)" \
            $(find . -type f -name "*.py" -not -path "./build/lib/*" ! -name "conf_correct.py") || true
      - name: Ensure we are not increasing the number of ignore lines as a guideline
        run: |
          if [ $(rg -t py --stats \
                    "(?:(?:flake8|noqa|pylint|pyrefly|pyright|ty|type|vulture): *(?:disable|ignore|noqa|[a-zA-Z]+[0-9]+)| Any|REPLACEME)" \
                    $(find . -type f -name "*.py" -not -path "./build/lib/*" ! -name "conf_correct.py") \
                      | awk "/ matches/ && "\!"/ contained matches/" \
                      | cut -d " " -f1) -lt 17 ] ;
          then exit 0 ; else exit 1 ; fi ;
      - name: Run shellcheck
        if: startsWith(runner.os, 'Linux')
        run: rg -t sh --files | xargs shellcheck
      - name: Run bashate
        if: startsWith(runner.os, 'Linux')
        run: rg -t sh --files | xargs uvx bashate -i E006
      - name: Generate Sphinx docs (inspect this output for Sphinx errors)
        if: startsWith(runner.os, 'Linux')
        run: |
          ( pushd docs/ > /dev/null && ./gen-sphinx-html.sh 2>&1 | rg ": (ERROR|WARNING|CRITICAL): " ; popd > /dev/null ; ) || true
      - name: Reset Git repo after Sphinx documentation generation
        if: startsWith(runner.os, 'Linux')
        run: git clean -fd
      - name: Fail if Sphinx doc generation has Sphinx errors
        if: startsWith(runner.os, 'Linux')
        run: |
          if [ "$( pushd docs/ > /dev/null && ./gen-sphinx-html.sh 2>&1 | rg ": (ERROR|WARNING|CRITICAL): " | wc -l ; popd > /dev/null ; )" != "0" ] ; then exit 1 ; fi ;
      - name: Reset Git repo a second time after Sphinx documentation generation
        if: startsWith(runner.os, 'Linux')
        run: git clean -fd

      - name: Install 32-bit Rust toolchain for some builds, only on x86_64 hosts
        if: contains('["--enable-32bit", "--enable-debug --disable-optimize --enable-32bit", "--enable-debug --disable-optimize --enable-simulator=arm --enable-32bit",]', matrix.build-type)
        run: if uname -m | grep -q 'x86_64' ; then rustup target add i686-unknown-linux-gnu ; fi

      - name: Clone Mercurial mozilla-central repo as a stream, retrying in times of failure
        run: |
          mkdir -p "$HOME"/trees && hg --version -q ;
          until time hg clone --stream https://hg.mozilla.org/mozilla-central/ "$HOME"/trees/mozilla-central/ ; do
            echo "Error cloning m-c. Deleting its failed clone directory, then retrying in 2 seconds..." ;
            rm -rf "$HOME"/trees/mozilla-central/ ;
            sleep 2 ;
          done

      - name: Run tools using pytest under code coverage
        env:
          BUILDSM: ${{ matrix.build-type }}
        run: |
          pip uninstall -y uv ;  # Temporarily remove uv to make compilation work on CI after bug 1934094 landed
          python -u -m pytest --cov --mypy --pylint --ruff --ruff-format --vulture ;
          pip install --upgrade uv ;

      - name: Print the .busted log, if any, when any previous compile steps fail
        if: ${{ failure() }}
        run: tail -n 100 "$HOME"/shell-cache/*/*.busted*

      - name: Remove m-c to free up more space for tarball creation
        run: rm -rf "$HOME"/trees/mozilla-central/
      - name: Create a tarball and SHA-256 checksum
        run: pushd "$HOME"/shell-cache; for f in *; do [[ $f =~ "js-" ]] && time tar -cpf - "$f" | zstd -T0 --long -19 > "$f".tar.zst && shasum -a 256 -b "$f".tar.zst | tee "$f".tar.zst.sha256; done; popd
      # Go back to using upstream upload-artifact at least v4 when https://github.com/actions/upload-artifact/issues/349 is fixed
      # - name: Archive tarball and checksum # GitHub UI forces download as zipped (not gzipped) files, double-compressing even if files are already compressed
      #   uses: nth10sd/upload-artifact-as-is@v1
      #   with:
      #     path: "~/shell-cache/*.tar.zst*"
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        continue-on-error: true # codecov limits number of uploads allowed for each commit
        with:
          env_vars: OS,PYTHON
          fail_ci_if_error: true # optional (default = false)
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

      # As of 20250131, temporarily ignore exit code while pruning uv cache, only Linux for now
      - name: Minimize uv cache, --ci will only keep locally-built packages
        run: uv cache prune --ci || true

  macOS-x86_64: # Remove when the Intel runners on CI no longer exist
    runs-on: macos-13 # Update Xcode version to the latest available as well
    strategy:
      fail-fast: false
      matrix:
        build-type:
          [
            "",
            "--enable-debug --disable-optimize",
            "--enable-debug --disable-optimize --enable-simulator=arm64",
            "--enable-address-sanitizer",
          ]
        python-version: ["3.11"]
    env:
      # From https://docs.astral.sh/uv/guides/integration/github/#caching
      UV_CACHE_DIR: /tmp/.uv-cache
      UV_SYSTEM_PYTHON: 1
    steps:
      # GitHub issue about disk space availability on GitHub Actions macOS runners
      # https://github.com/actions/runner-images/issues/10511#issuecomment-2325830665
      - name: Remove unused Xcode to prevent low disk space issues
        run: |
          df -h ; ls -lahtd /Applications/Xcode*
          if [ -d /Applications/Xcode_14.1.app/ ] ; then sudo rm -rf /Applications/Xcode_14.1.app ; fi
          if [ -d /Applications/Xcode_14.2.app/ ] ; then sudo rm -rf /Applications/Xcode_14.2.app ; fi
          if [ -d /Applications/Xcode_14.3.1.app/ ] ; then sudo rm -rf /Applications/Xcode_14.3.1.app ; fi
          if [ -d /Applications/Xcode_15.0.1.app/ ] ; then sudo rm -rf /Applications/Xcode_15.0.1.app ; fi
          if [ -d /Applications/Xcode_15.1.app/ ] ; then sudo rm -rf /Applications/Xcode_15.1.app ; fi
          df -h ; ls -lahtd /Applications/Xcode*
      - name: Set Xcode version
        shell: bash
        run: |
          sudo xcode-select -s "/Applications/Xcode_15.2.app"
          echo "MD_APPLE_SDK_ROOT=/Applications/Xcode_15.2.app" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      # uv pip cache dependencies to save time
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('requirements.txt') }}
            uv-${{ runner.os }}-${{ runner.arch }}-
            uv-${{ runner.os }}-
      - name: Use deploy key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: |
            ${{ secrets.CRASH2COV_TOKEN }}
            ${{ secrets.ZZBASE_TOKEN }}

      - name: Install uv
        shell: bash
        run: python -u -m pip install --upgrade uv=="$(python -u -c 'from pathlib import Path;print(list(set([x for x in Path("pyproject.toml").read_text(encoding="utf-8").splitlines() if "uv >= " in x]))[0].split("# ", maxsplit=1)[0].strip().split("\"")[1].removeprefix("uv >= "))')"
      - name: Remove subdomain to make requirements.txt setup work in CI
        run: python -c 'import fileinput; [print(line.partition("git@")[0] + "git@github.com/" + line.partition(".github.com/")[-1] if (".github.com/" in line and not line.startswith("#")) else line, end="") for line in fileinput.input(inplace=True)]' requirements.txt
      - name: Print differences in git repository needed to make CI work
        run: git diff
      - name: Install requirements from possibly-changed requirements.txt, and package in development mode
        run: uv pip install -r requirements.txt -e .
      - name: Revert requirements.txt if changed
        run: git checkout -- requirements.txt

      - name: Run with ruff
        run: python -u -m ruff check
      - name: Run with ty
        run: python -u -m ty check --error-on-warning

      - name: Make sure LLVM is installed and look for available LLVM versions
        run: brew install llvm || true ; brew link --overwrite python@3.12 ; brew install llvm ; ls -l /usr/local/Cellar/llvm/
      - name: Set macOS environment variables
        run: |
          echo "LLVM_CONFIG=/usr/local/Cellar/llvm/$(pushd /usr/local/Cellar/llvm/ > /dev/null ; ls -d */ | sed 's/.$//' ; popd > /dev/null;)/bin/llvm-config" >> $GITHUB_ENV ;
          echo "LLVM_SYMBOLIZER=/usr/local/Cellar/llvm/$(pushd /usr/local/Cellar/llvm/ > /dev/null ; ls -d */ | sed 's/.$//' ; popd > /dev/null;)/bin/llvm-symbolizer" >> $GITHUB_ENV ;
      - name: Set macOS llvm-config and llvm-symbolizer symlinks
        run: |
          sudo ln -s /usr/local/Cellar/llvm/"$(pushd /usr/local/Cellar/llvm/ > /dev/null ; ls -d */ | sed 's/.$//' ; popd > /dev/null;)"/bin/llvm-config /usr/local/bin/llvm-config ;
          sudo ln -s /usr/local/Cellar/llvm/"$(pushd /usr/local/Cellar/llvm/ > /dev/null ; ls -d */ | sed 's/.$//' ; popd > /dev/null;)"/bin/llvm-symbolizer /usr/local/bin/llvm-symbolizer ;
      - name: Check versions
        run: gcc --version; g++ --version; clang --version; clang++ --version; llvm-symbolizer --version; llvm-config --version
      - name: Install 32/64-bit SpiderMonkey prerequisites and forcibly overwrite existing brew issues when linking Python
        run: brew install ccache gawk gnu-tar mercurial pkg-config python ripgrep zlib || true ; brew link --overwrite python@3.12 ; brew autoremove
      - name: Run with pyrefly and print out differences if any (Can be removed when pyrefly matures)
        run: rg -t py --files | xargs pyrefly check --remove-unused-ignores ; git diff ; git checkout -- .

      - name: Clone Mercurial mozilla-central repo as a stream, retrying in times of failure
        run: |
          mkdir -p "$HOME"/trees && hg --version -q ;
          until time hg clone --stream https://hg.mozilla.org/mozilla-central/ "$HOME"/trees/mozilla-central/ ; do
            echo "Error cloning m-c. Deleting its failed clone directory, then retrying in 2 seconds..." ;
            rm -rf "$HOME"/trees/mozilla-central/ ;
            sleep 2 ;
          done

      - name: Run tools using pytest under code coverage
        env:
          BUILDSM: ${{ matrix.build-type }}
        run: |
          python -u -m pytest --cov --mypy --pylint --ruff --ruff-format --vulture

      - name: Print the .busted log, if any, when any previous compile steps fail
        if: ${{ failure() }}
        run: tail -n 100 "$HOME"/shell-cache/*/*.busted*

      - name: Remove m-c to free up more space for tarball creation
        run: rm -rf "$HOME"/trees/mozilla-central/
      - name: Create a tarball and SHA-256 checksum
        run: pushd "$HOME"/shell-cache; for f in *; do [[ $f =~ "js-" ]] && time gtar -cpf - "$f" | zstd -T0 --long -19 > "$f".tar.zst && shasum -a 256 -b "$f".tar.zst | tee "$f".tar.zst.sha256; done; popd
      # Go back to using upstream upload-artifact at least v4 when https://github.com/actions/upload-artifact/issues/349 is fixed
      # - name: Archive tarball and checksum # GitHub UI forces download as zipped (not gzipped) files, double-compressing even if files are already compressed
      #   uses: nth10sd/upload-artifact-as-is@v1
      #   with:
      #     path: "~/shell-cache/*.tar.zst*"
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        continue-on-error: true # codecov limits number of uploads allowed for each commit
        with:
          env_vars: OS,PYTHON
          fail_ci_if_error: true # optional (default = false)
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

      - name: Minimize uv cache, --ci will only keep locally-built packages
        run: uv cache prune --ci

  macOS-arm64:
    runs-on: macos-15 # Update Xcode version to the latest available as well
    strategy:
      fail-fast: false
      matrix:
        build-type:
          [
            "",
            "--enable-debug --disable-optimize",
            "--enable-debug --disable-optimize --enable-simulator=arm64",
            "--enable-address-sanitizer",
          ]
        python-version: ["3.11"]
    env:
      # From https://docs.astral.sh/uv/guides/integration/github/#caching
      UV_CACHE_DIR: /tmp/.uv-cache
      UV_SYSTEM_PYTHON: 1
    steps:
      # GitHub issue about disk space availability on GitHub Actions macOS runners
      # https://github.com/actions/runner-images/issues/10511#issuecomment-2325830665
      - name: Remove unused Xcode to prevent low disk space issues
        run: |
          df -h ; ls -lahtd /Applications/Xcode*
          if [ -d /Applications/Xcode_16.app/ ] ; then sudo rm -rf /Applications/Xcode_16.app ; fi
          if [ -d /Applications/Xcode_16.1.app/ ] ; then sudo rm -rf /Applications/Xcode_16.1.app ; fi
          if [ -d /Applications/Xcode_16.2.app/ ] ; then sudo rm -rf /Applications/Xcode_16.2.app ; fi
          if [ -d /Applications/Xcode_16.3.app/ ] ; then sudo rm -rf /Applications/Xcode_16.3.app ; fi
          df -h ; ls -lahtd /Applications/Xcode*
      - name: Set Xcode version
        shell: bash
        run: |
          sudo xcode-select -s "/Applications/Xcode_16.4.app"
          echo "MD_APPLE_SDK_ROOT=/Applications/Xcode_16.4.app" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      # uv pip cache dependencies to save time
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('requirements.txt') }}
            uv-${{ runner.os }}-${{ runner.arch }}-
            uv-${{ runner.os }}-
      - name: Use deploy key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: |
            ${{ secrets.CRASH2COV_TOKEN }}
            ${{ secrets.ZZBASE_TOKEN }}

      - name: Install uv
        shell: bash
        run: python -u -m pip install --upgrade uv=="$(python -u -c 'from pathlib import Path;print(list(set([x for x in Path("pyproject.toml").read_text(encoding="utf-8").splitlines() if "uv >= " in x]))[0].split("# ", maxsplit=1)[0].strip().split("\"")[1].removeprefix("uv >= "))')"
      - name: Remove subdomain to make requirements.txt setup work in CI
        run: python -c 'import fileinput; [print(line.partition("git@")[0] + "git@github.com/" + line.partition(".github.com/")[-1] if (".github.com/" in line and not line.startswith("#")) else line, end="") for line in fileinput.input(inplace=True)]' requirements.txt
      - name: Print differences in git repository needed to make CI work
        run: git diff
      - name: Install requirements from possibly-changed requirements.txt, and package in development mode
        run: uv pip install -r requirements.txt -e .
      - name: Revert requirements.txt if changed
        run: git checkout -- requirements.txt

      - name: Run with ruff
        run: python -u -m ruff check
      - name: Run with ty
        run: python -u -m ty check --error-on-warning

      - name: Make sure LLVM is installed and look for available LLVM versions
        run: brew install llvm || true ; brew link --overwrite python@3.12 ; brew install llvm ; ls -l /opt/homebrew/Cellar/llvm/
      - name: Set macOS environment variables
        run: |
          echo "LLVM_CONFIG=/opt/homebrew/Cellar/llvm/$(pushd /opt/homebrew/Cellar/llvm/ > /dev/null ; ls -d */ | sed 's/.$//' ; popd > /dev/null;)/bin/llvm-config" >> $GITHUB_ENV ;
          echo "LLVM_SYMBOLIZER=/opt/homebrew/Cellar/llvm/$(pushd /opt/homebrew/Cellar/llvm/ > /dev/null ; ls -d */ | sed 's/.$//' ; popd > /dev/null;)/bin/llvm-symbolizer" >> $GITHUB_ENV ;
      - name: Set macOS llvm-config and llvm-symbolizer symlinks
        run: |
          sudo ln -s /opt/homebrew/Cellar/llvm/"$(pushd /opt/homebrew/Cellar/llvm/ > /dev/null ; ls -d */ | sed 's/.$//' ; popd > /dev/null;)"/bin/llvm-config /usr/local/bin/llvm-config ;
          sudo ln -s /opt/homebrew/Cellar/llvm/"$(pushd /opt/homebrew/Cellar/llvm/ > /dev/null ; ls -d */ | sed 's/.$//' ; popd > /dev/null;)"/bin/llvm-symbolizer /usr/local/bin/llvm-symbolizer ;
      - name: Check versions
        run: gcc --version; g++ --version; clang --version; clang++ --version; llvm-symbolizer --version; llvm-config --version
      - name: Install 32/64-bit SpiderMonkey prerequisites and forcibly overwrite existing brew issues when linking Python
        run: brew install ccache gawk gnu-tar mercurial pkg-config python ripgrep zlib || true ; brew link --overwrite python@3.12 ; brew autoremove
      - name: Run with pyrefly and print out differences if any (Can be removed when pyrefly matures)
        run: rg -t py --files | xargs pyrefly check --remove-unused-ignores ; git diff ; git checkout -- .

      - name: Clone Mercurial mozilla-central repo as a stream, retrying in times of failure
        run: |
          mkdir -p "$HOME"/trees && hg --version -q ;
          until time hg clone --stream https://hg.mozilla.org/mozilla-central/ "$HOME"/trees/mozilla-central/ ; do
            echo "Error cloning m-c. Deleting its failed clone directory, then retrying in 2 seconds..." ;
            rm -rf "$HOME"/trees/mozilla-central/ ;
            sleep 2 ;
          done

      - name: Run tools using pytest under code coverage
        env:
          BUILDSM: ${{ matrix.build-type }}
        run: |
          python -u -m pytest --cov --mypy --pylint --ruff --ruff-format --vulture

      - name: Print the .busted log, if any, when any previous compile steps fail
        if: ${{ failure() }}
        run: tail -n 100 "$HOME"/shell-cache/*/*.busted*

      - name: Remove m-c to free up more space for tarball creation
        run: rm -rf "$HOME"/trees/mozilla-central/
      - name: Create a tarball and SHA-256 checksum
        run: pushd "$HOME"/shell-cache; for f in *; do [[ $f =~ "js-" ]] && time gtar -cpf - "$f" | zstd -T0 --long -19 > "$f".tar.zst && shasum -a 256 -b "$f".tar.zst | tee "$f".tar.zst.sha256; done; popd
      # Go back to using upstream upload-artifact at least v4 when https://github.com/actions/upload-artifact/issues/349 is fixed
      # - name: Archive tarball and checksum # GitHub UI forces download as zipped (not gzipped) files, double-compressing even if files are already compressed
      #   uses: nth10sd/upload-artifact-as-is@v1
      #   with:
      #     path: "~/shell-cache/*.tar.zst*"
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        continue-on-error: true # codecov limits number of uploads allowed for each commit
        with:
          env_vars: OS,PYTHON
          fail_ci_if_error: true # optional (default = false)
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

      - name: Minimize uv cache, --ci will only keep locally-built packages
        run: uv cache prune --ci

  Windows:
    runs-on: windows-2022 # If changing MSVC version, adjust destination folder for a .pdb file in autostart script
    strategy:
      fail-fast: false
      matrix:
        build-type: [
            # Empty space needed only for Win CI, will be .rstrip() later
            # The "" null string cannot seem to propagate properly from
            # PowerShell -> batch script -> bash
            " ",
            "--enable-address-sanitizer", # DllMain patch and bug 1802675 patch added
            "--enable-debug --disable-optimize",
            "--enable-debug --disable-optimize --enable-simulator=arm64",
            "--disable-debug --enable-simulator=arm64",
          ]
        python-version: ["3.11"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      # - name: Get pip cache dir
      #   id: pip-cache
      #   run: echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      - name: pip cache
        uses: actions/cache@v4
        with:
          # 20221026 This only worked w/set-output in the pip cache dir step on Win
          # path: ${{ steps.pip-cache.outputs.dir }}
          path: ~\AppData\Local\pip\Cache
          key: pip-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/requirements.txt') }}
            pip-${{ runner.os }}-${{ runner.arch }}-
            pip-${{ runner.os }}-
      - name: Use deploy key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: |
            ${{ secrets.CRASH2COV_TOKEN }}
            ${{ secrets.ZZBASE_TOKEN }}

      # uv (0.3.2) pip seems to have issues accessing the GitHub Actions env and PATHs, whereas pip seems fine

      - name: Install pip prerequisites
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: python -u -m pip install --upgrade pip setuptools wheel ;
      - name: Remove subdomain to make requirements.txt setup work in CI
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: python -c 'import fileinput; [print(line.partition("git@")[0] + "git@github.com/" + line.partition(".github.com/")[-1] if (".github.com/" in line and not line.startswith("#")) else line, end="") for line in fileinput.input(inplace=True)]' requirements.txt ;
      - name: Print differences in git repository needed to make CI work
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: git diff ;
      - name: Install requirements from possibly-changed requirements.txt
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: pip install -r requirements.txt ;
      - name: Revert requirements.txt if changed
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: git checkout -- requirements.txt ;
      - name: Install package in development mode
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: pip install --upgrade -e . ;

      - name: Run with ruff
        run: python -u -m ruff check
      - name: Run with ty
        run: python -u -m ty check --error-on-warning
      - name: Install prerequisites, bz.mercurial-scm.org/show_bug.cgi?id=6910
        run: |
          while ($True) {
            try {
              choco upgrade ripgrep -y ; choco install mozillabuild sd-cli -y ;
              break
            } catch {
              echo "Error installing via choco, retrying in 2 seconds..." ;
              sleep 2 ;
            }
          }
      - name: Run with pyrefly and print out differences if any (Can be removed when pyrefly matures)
        run: rg -t py --files | xargs pyrefly check --remove-unused-ignores ; git diff ; git checkout -- .

      - name: Remove Python from MozillaBuild
        run: rm C:\mozilla-build\python3 -r -fo
      - name: Install uv so we can use uv python
        run: pip install --upgrade uv
      - name: Get the desired Python (Also update symlink in the next step)
        run: uv python install 3.11.12
      - name: Copy uv's Python into the correct MozillaBuild location
        run: ln -s $env:APPDATA\uv\python\cpython-3.11.12-windows-x86_64-none C:\mozilla-build\python3
      - name: Dump a list of available Pythons
        run: uv python list
      - name: Copy Python binary to python3.exe to make Mozilla build process happy
        run: ln -s C:\mozilla-build\python3\python.exe C:\mozilla-build\python3\python3.exe
      - name: List available Python binaries in MozillaBuild folder
        run: ls C:\mozilla-build\python3\python*.exe

      - name: Copy custom MozillaBuild autostart script to mozilla-build location
        run: cp scripts/mozillabuild/autostart.sh C:\mozilla-build\
      - name: Amend MozillaBuild start command
        run: |
          sd '%MOZILLABUILD%msys2\\msys2_shell.cmd -no-start -defterm -full-path %\*' '%MOZILLABUILD%msys2\msys2_shell.cmd -no-start -defterm -full-path %* -shell bash %MOZILLABUILD%autostart.sh ${{ matrix.build-type }}' C:\mozilla-build\start-shell.bat

      - name: Install Mercurial after ensuring uv tool environment has been added
        run: $env:PATH = "$env:pythonLocation`\Scripts;$env:USERPROFILE`\.local`\bin;$env:PATH" ; uv tool install mercurial ; hg --version -q || true
      - name: Clone Mercurial mozilla-central repo as a stream, retrying in times of failure
        run: |
          mkdir -p $HOME/trees && hg --version -q ;
          while ($true) {
            $result = & hg clone --stream https://hg.mozilla.org/mozilla-central/ $HOME/trees/mozilla-central/ 2>&1 ;
            if ($result -match "abort") {
              echo "Clone failed. Retrying..." ;
              sleep 3 ;
            } else {
              echo "Clone successful!" ;
              return ;
            }
          }

      - name: Create deploy key file
        env:
          DEPLOY_KEY: ${{ secrets.ZZBASE_TOKEN }}
        run: echo "$env:DEPLOY_KEY" > ~/.ssh/id_ed25519_RO_zzbase
      - name: Convert deploy key CRLF to LF
        run: |
          ((Get-Content ~/.ssh/id_ed25519_RO_zzbase) -join "`n") + "`n" | Set-Content -NoNewline ~/.ssh/id_ed25519_RO_zzbase
      - name: Create second deploy key file
        env:
          DEPLOY_KEY: ${{ secrets.CRASH2COV_TOKEN }}
        run: echo "$env:DEPLOY_KEY" > ~/.ssh/id_ed25519_RO_crash2cov
      - name: Convert second deploy key CRLF to LF
        run: |
          ((Get-Content ~/.ssh/id_ed25519_RO_crash2cov) -join "`n") + "`n" | Set-Content -NoNewline ~/.ssh/id_ed25519_RO_crash2cov
      - name: Run tools using pytest under code coverage via MozillaBuild
        env:
          PYTEST_STATUS_FILE: "~/pytest-failure.txt"
        run: C:\mozilla-build\start-shell.bat ; if (Test-Path "$env:PYTEST_STATUS_FILE") { cat "$env:PYTEST_STATUS_FILE" ; throw }

      - name: Print the .busted log, if any, when any previous compile steps fail
        if: ${{ failure() }}
        run: cat $HOME/shell-cache/*/*.busted* -Tail 100

      # Go back to using upstream upload-artifact at least v4 when https://github.com/actions/upload-artifact/issues/349 is fixed
      # Removal of m-c, and creation of tarball and SHA-256 checksum happens in autostart.sh
      # - name: Archive tarball and checksum # GitHub UI forces download as zipped (not gzipped) files, double-compressing even if files are already compressed
      #   uses: nth10sd/upload-artifact-as-is@v1
      #   with:
      #     path: "~/shell-cache/*.tar.zst*"
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        continue-on-error: true # codecov limits number of uploads allowed for each commit
        with:
          env_vars: OS,PYTHON
          fail_ci_if_error: true # optional (default = false)
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
