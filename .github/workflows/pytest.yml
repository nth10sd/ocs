# For more information on GitHub Actions for Python projects, see: https://git.io/JtENw

name: pytest

on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: "5 4,10,16,22 * * *"
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  Linux:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        build-type:
          [
            "",
            "--enable-address-sanitizer",
            "--enable-debug",
            "--enable-debug --disable-optimize --enable-oom-breakpoint --without-intl-api --disable-profiling",
            "--enable-debug --disable-optimize --enable-simulator=arm64",
            "--disable-debug --enable-simulator=arm64",
            "--enable-valgrind",
            "--enable-32bit",
            "--enable-debug --disable-optimize --enable-32bit",
            "--enable-debug --disable-optimize --enable-simulator=arm --enable-32bit",
          ]
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get pip cache dir
        id: pip-cache
        run: echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      - name: pip cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Use deploy key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: |
            ${{ secrets.CRASH2COV_TOKEN }}
            ${{ secrets.ZZBASE_TOKEN }}

      - name: Install pip prerequisites
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: python -u -m pip install --upgrade pip setuptools wheel ;
      - name: Removing subdomain to make requirements.txt setup work in CI
        run: python -c 'import fileinput; [print(line.partition("git@")[0] + "git@github.com/" + line.partition(".github.com/")[-1] if (".github.com/" in line and not line.startswith("#")) else line, end="") for line in fileinput.input(inplace=True)]' requirements.txt ; git diff ;
      - name: Install requirements from possibly-changed requirements.txt
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: pip install -r requirements.txt ;
      - name: Revert requirements.txt if changed
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: git checkout -- requirements.txt ;
      - name: Install package in development mode
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: pip install --upgrade -e . ;

      - name: Run with ruff
        run: python -u -m ruff check .
      - name: Run with refurb to find code that can be written in a more modern way
        if: startsWith(runner.os, 'Linux')
        run: python -u -m refurb .
      - name: Run with vulture to find dead code
        if: startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS')
        run: |
          python -c 'exec("from pathlib import Path;import shutil;import subprocess;\ntry: import tomllib;\nexcept ImportError: import tomli as tomllib;\nwith Path(\"pyproject.toml\").open(mode=\"rb\") as fp: c = tomllib.load(fp); n = c[\"project\"][\"name\"];\nif not (v := shutil.which(\"vulture\")): raise RuntimeError(\"Please first install vulture\");\nfor z in sorted({x.split(\"  # \",maxsplit=1)[0] for x in sorted(subprocess.run([y for y in [v,\".\",\".vulture_allowlist\" if Path(\".vulture_allowlist\").is_file() else \"\"] if y],capture_output=True,text=True).stdout.rstrip().splitlines()) if not x.startswith(\"# \")}): print(z)")'
      - name: Run pyright
        if: startsWith(runner.os, 'Linux')
        run: python -u -m pyright

      - name: Set Linux environment variables
        run: |
          echo "LLVM_CONFIG=/usr/lib/llvm-$(pushd /usr/lib/ > /dev/null ; ls -d llvm-*/ | tail -n 1 | sed 's/.$//' | cut -d "-" -f 2 ; popd > /dev/null;)/bin/llvm-config" >> $GITHUB_ENV ;
          echo "LLVM_SYMBOLIZER=/usr/lib/llvm-$(pushd /usr/lib/ > /dev/null ; ls -d llvm-*/ | tail -n 1 | sed 's/.$//' | cut -d "-" -f 2 ; popd > /dev/null;)/bin/llvm-symbolizer" >> $GITHUB_ENV ;
          echo "SHELL=/bin/bash" >> $GITHUB_ENV ;
      - name: Set Linux llvm-config and llvm-symbolizer symlinks
        run: sudo ln -s /usr/lib/llvm-$(pushd /usr/lib/ > /dev/null ; ls -d llvm-*/ | tail -n 1 | sed 's/.$//' | cut -d "-" -f 2 ; popd > /dev/null;)/bin/llvm-config /usr/bin/llvm-config && sudo ln -s /usr/lib/llvm-$(pushd /usr/lib/ > /dev/null ; ls -d llvm-*/ | tail -n 1 | sed 's/.$//' | cut -d "-" -f 2 ; popd > /dev/null;)/bin/llvm-symbolizer /usr/bin/llvm-symbolizer
      - name: Check versions
        run: gcc --version; g++ --version; clang --version; clang++ --version; llvm-symbolizer --version; llvm-config --version

      - name: Install 64-bit SpiderMonkey prerequisites
        run: sudo apt-get update ; sudo apt-get install autoconf2.13 ccache libclang1-$(pushd /usr/lib/ > /dev/null ; ls -d llvm-*/ | tail -n 1 | sed 's/.$//' | cut -d "-" -f 2 ; popd > /dev/null;) ripgrep
      - name: Install Valgrind for some builds
        if: matrix.build-type == '--enable-valgrind'
        run: sudo apt-get install valgrind
      - name: Install 32-bit prerequisites for some builds
        if: contains('["--enable-32bit", "--enable-debug --disable-optimize --enable-32bit", "--enable-debug --disable-optimize --enable-simulator=arm --enable-32bit",]', matrix.build-type)
        run: sudo apt-get install g++-multilib lib32z1-dev libc6-dev-i386
      - name: List free space
        run: df -h
      - name: Remove unneeded browsers
        run: sudo apt-get remove google-chrome-stable microsoft-edge-stable
      - name: Run apt-get autoremove and apt-get clean
        run: sudo apt-get autoremove ; sudo apt-get clean
      - name: List free space again
        run: df -h
      - name: Search for existing linter ignore lines in Python
        run: |
          rg -t py --stats "(?:(?:flake8|noqa|pylint|pyright|type): *(?:disable|ignore|noqa|[a-zA-Z]+[0-9]+)| Any|REPLACEME)" \
            $(find . -type f -name "*.py" -not -path "./build/lib/*" ! -name "conf_correct.py") || true
      - name: Ensure we are not increasing the number of ignore lines as a guideline
        run: |
          if [ $(rg -t py --stats \
                    "(?:(?:flake8|noqa|pylint|pyright|type): *(?:disable|ignore|noqa|[a-zA-Z]+[0-9]+)| Any|REPLACEME)" \
                    $(find . -type f -name "*.py" -not -path "./build/lib/*" ! -name "conf_correct.py") \
                      | awk "/ matches/ && "\!"/ contained matches/" \
                      | cut -d " " -f1) -lt 6 ] ;
          then exit 0 ; else exit 1 ; fi ;
      - name: Run shellcheck
        if: startsWith(runner.os, 'Linux')
        run: rg -t sh --files | xargs shellcheck
      - name: Run bashate
        if: startsWith(runner.os, 'Linux')
        run: rg -t sh --files | xargs bashate -i E006
      - name: Generate Sphinx docs (inspect this output for Sphinx errors)
        if: startsWith(runner.os, 'Linux')
        run: |
          ( pushd docs/ > /dev/null && ./gen-sphinx-html.sh 2>&1 | rg ": (ERROR|WARNING|CRITICAL): " ; popd > /dev/null ; ) || true
      - name: Reset Git repo after Sphinx documentation generation
        if: startsWith(runner.os, 'Linux')
        run: git clean -fd
      - name: Fail if Sphinx doc generation has Sphinx errors
        if: startsWith(runner.os, 'Linux')
        run: |
          if [ "$( pushd docs/ > /dev/null && ./gen-sphinx-html.sh 2>&1 | rg ": (ERROR|WARNING|CRITICAL): " | wc -l ; popd > /dev/null ; )" != "0" ] ; then exit 1 ; fi ;
      - name: Reset Git repo a second time after Sphinx documentation generation
        if: startsWith(runner.os, 'Linux')
        run: git clean -fd

      - name: Rustup latest 64-bit Rust, as it seems faster than Rust-related workflows
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path && source "$HOME"/.cargo/env
      - name: Install 32-bit Rust toolchain for some builds
        if: contains('["--enable-32bit", "--enable-debug --disable-optimize --enable-32bit", "--enable-debug --disable-optimize --enable-simulator=arm --enable-32bit",]', matrix.build-type)
        run: rustup target add i686-unknown-linux-gnu

      - name: Clone Mercurial mozilla-central repo as a stream, retrying in times of failure
        run: |
          mkdir -p "$HOME"/trees && hg --version -q ;
          until time hg clone --stream https://hg.mozilla.org/mozilla-central/ "$HOME"/trees/mozilla-central/ ; do
            echo "Error cloning m-c. Deleting its failed clone directory, then retrying in 2 seconds..." ;
            rm -rf "$HOME"/trees/mozilla-central/ ;
            sleep 2 ;
          done

      - name: Run tools using pytest under code coverage
        env:
          BUILDSM: ${{ matrix.build-type }}
        run: |
          python -u -m pytest --cov --mypy --pylint --ruff --ruff-format

      - name: Print the .busted log, if any, when any previous compile steps fail
        if: ${{ failure() }}
        run: tail -n 100 "$HOME"/shell-cache/*/*.busted*

      - name: Remove m-c to free up more space for tarball creation
        run: rm -rf "$HOME"/trees/mozilla-central/
      - name: Create a tarball and SHA-256 checksum
        run: pushd "$HOME"/shell-cache; for f in *; do [[ $f =~ "js-" ]] && time tar -cpf - "$f" | zstd -T0 --long -19 > "$f".tar.zst && shasum -a 256 -b "$f".tar.zst | tee "$f".tar.zst.sha256; done; popd
      - name: Archive tarball and checksum # GitHub UI forces download as zipped (not gzipped) files, double-compressing even if files are already compressed
        uses: nth10sd/upload-artifact-as-is@v1
        with:
          path: "~/shell-cache/*.tar.zst*"
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          env_vars: OS,PYTHON
          fail_ci_if_error: true # optional (default = false)
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  macOS-x86_64: # Remove when the Intel runners on CI no longer exist
    runs-on: macos-13 # Update Xcode version to the latest available as well
    strategy:
      fail-fast: false
      matrix:
        build-type:
          [
            "",
            "--enable-debug --disable-optimize",
            "--enable-debug --disable-optimize --enable-simulator=arm64",
            "--enable-address-sanitizer",
          ]
        python-version: ["3.10"]
    steps:
      - name: Set Xcode version
        shell: bash
        run: |
          sudo xcode-select -s "/Applications/Xcode_15.1.app"
          echo "MD_APPLE_SDK_ROOT=/Applications/Xcode_15.1.app" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get pip cache dir
        id: pip-cache
        run: echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      - name: pip cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Use deploy key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: |
            ${{ secrets.CRASH2COV_TOKEN }}
            ${{ secrets.ZZBASE_TOKEN }}

      - name: Install pip prerequisites
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: python -u -m pip install --upgrade pip setuptools wheel ;
      - name: Removing subdomain to make requirements.txt setup work in CI
        run: python -c 'import fileinput; [print(line.partition("git@")[0] + "git@github.com/" + line.partition(".github.com/")[-1] if (".github.com/" in line and not line.startswith("#")) else line, end="") for line in fileinput.input(inplace=True)]' requirements.txt ; git diff ;
      - name: Install requirements from possibly-changed requirements.txt
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: pip install -r requirements.txt ;
      - name: Revert requirements.txt if changed
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: git checkout -- requirements.txt ;
      - name: Install package in development mode
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: pip install --upgrade -e . ;

      - name: Run with ruff
        run: python -u -m ruff check .
      - name: Run with vulture to find dead code
        if: startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS')
        run: |
          python -c 'exec("from pathlib import Path;import shutil;import subprocess;\ntry: import tomllib;\nexcept ImportError: import tomli as tomllib;\nwith Path(\"pyproject.toml\").open(mode=\"rb\") as fp: c = tomllib.load(fp); n = c[\"project\"][\"name\"];\nif not (v := shutil.which(\"vulture\")): raise RuntimeError(\"Please first install vulture\");\nfor z in sorted({x.split(\"  # \",maxsplit=1)[0] for x in sorted(subprocess.run([y for y in [v,\".\",\".vulture_allowlist\" if Path(\".vulture_allowlist\").is_file() else \"\"] if y],capture_output=True,text=True).stdout.rstrip().splitlines()) if not x.startswith(\"# \")}): print(z)")'

      - name: Make sure LLVM is installed and look for available LLVM versions
        run: brew install llvm || true ; brew link --overwrite python@3.11 ; brew install llvm ; ls -l /usr/local/Cellar/llvm/
      - name: Set macOS environment variables
        run: |
          echo "LLVM_CONFIG=/usr/local/Cellar/llvm/$(pushd /usr/local/Cellar/llvm/ > /dev/null ; ls -d */ | sed 's/.$//' ; popd > /dev/null;)/bin/llvm-config" >> $GITHUB_ENV ;
          echo "LLVM_SYMBOLIZER=/usr/local/Cellar/llvm/$(pushd /usr/local/Cellar/llvm/ > /dev/null ; ls -d */ | sed 's/.$//' ; popd > /dev/null;)/bin/llvm-symbolizer" >> $GITHUB_ENV ;
      - name: Set macOS llvm-config and llvm-symbolizer symlinks
        run: |
          sudo ln -s /usr/local/Cellar/llvm/"$(pushd /usr/local/Cellar/llvm/ > /dev/null ; ls -d */ | sed 's/.$//' ; popd > /dev/null;)"/bin/llvm-config /usr/local/bin/llvm-config ;
          sudo ln -s /usr/local/Cellar/llvm/"$(pushd /usr/local/Cellar/llvm/ > /dev/null ; ls -d */ | sed 's/.$//' ; popd > /dev/null;)"/bin/llvm-symbolizer /usr/local/bin/llvm-symbolizer ;
      - name: Check versions
        run: gcc --version; g++ --version; clang --version; clang++ --version; llvm-symbolizer --version; llvm-config --version
      - name: Install 32/64-bit SpiderMonkey prerequisites and forcibly overwrite existing brew issues when linking Python
        run: brew install autoconf@2.13 ccache gawk gnu-tar mercurial pkg-config python ripgrep zlib || true ; brew link --overwrite python@3.11 ; brew autoremove
      - name: Rustup latest 32/64-bit Rust, as it seems faster than Rust-related workflows
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path && source "$HOME"/.cargo/env && rustup target add i686-unknown-linux-gnu

      - name: Clone Mercurial mozilla-central repo as a stream, retrying in times of failure
        run: |
          mkdir -p "$HOME"/trees && hg --version -q ;
          until time hg clone --stream https://hg.mozilla.org/mozilla-central/ "$HOME"/trees/mozilla-central/ ; do
            echo "Error cloning m-c. Deleting its failed clone directory, then retrying in 2 seconds..." ;
            rm -rf "$HOME"/trees/mozilla-central/ ;
            sleep 2 ;
          done

      - name: Run tools using pytest under code coverage
        env:
          BUILDSM: ${{ matrix.build-type }}
        run: |
          python -u -m pytest --cov --mypy --pylint --ruff --ruff-format

      - name: Print the .busted log, if any, when any previous compile steps fail
        if: ${{ failure() }}
        run: tail -n 100 "$HOME"/shell-cache/*/*.busted*

      - name: Remove m-c to free up more space for tarball creation
        run: rm -rf "$HOME"/trees/mozilla-central/
      - name: Create a tarball and SHA-256 checksum
        run: pushd "$HOME"/shell-cache; for f in *; do [[ $f =~ "js-" ]] && time gtar -cpf - "$f" | zstd -T0 --long -19 > "$f".tar.zst && shasum -a 256 -b "$f".tar.zst | tee "$f".tar.zst.sha256; done; popd
      - name: Archive tarball and checksum # GitHub UI forces download as zipped (not gzipped) files, double-compressing even if files are already compressed
        uses: nth10sd/upload-artifact-as-is@v1
        with:
          path: "~/shell-cache/*.tar.zst*"
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          env_vars: OS,PYTHON
          fail_ci_if_error: true # optional (default = false)
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  macOS-arm64:
    runs-on: macos-14 # Update Xcode version to the latest available as well
    strategy:
      fail-fast: false
      matrix:
        build-type:
          [
            "",
            "--enable-debug --disable-optimize",
            "--enable-debug --disable-optimize --enable-simulator=arm64",
            "--enable-address-sanitizer",
          ]
        python-version: ["3.10"]
    steps:
      - name: Set Xcode version
        shell: bash
        run: |
          sudo xcode-select -s "/Applications/Xcode_15.1.app"
          echo "MD_APPLE_SDK_ROOT=/Applications/Xcode_15.1.app" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get pip cache dir
        id: pip-cache
        run: echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      - name: pip cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Use deploy key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: |
            ${{ secrets.CRASH2COV_TOKEN }}
            ${{ secrets.ZZBASE_TOKEN }}

      - name: Install pip prerequisites
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: python -u -m pip install --upgrade pip setuptools wheel ;
      - name: Removing subdomain to make requirements.txt setup work in CI
        run: python -c 'import fileinput; [print(line.partition("git@")[0] + "git@github.com/" + line.partition(".github.com/")[-1] if (".github.com/" in line and not line.startswith("#")) else line, end="") for line in fileinput.input(inplace=True)]' requirements.txt ; git diff ;
      - name: Install requirements from possibly-changed requirements.txt
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: pip install -r requirements.txt ;
      - name: Revert requirements.txt if changed
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: git checkout -- requirements.txt ;
      - name: Install package in development mode
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: pip install --upgrade -e . ;

      - name: Run with ruff
        run: python -u -m ruff check .
      - name: Run with vulture to find dead code
        if: startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS')
        run: |
          python -c 'exec("from pathlib import Path;import shutil;import subprocess;\ntry: import tomllib;\nexcept ImportError: import tomli as tomllib;\nwith Path(\"pyproject.toml\").open(mode=\"rb\") as fp: c = tomllib.load(fp); n = c[\"project\"][\"name\"];\nif not (v := shutil.which(\"vulture\")): raise RuntimeError(\"Please first install vulture\");\nfor z in sorted({x.split(\"  # \",maxsplit=1)[0] for x in sorted(subprocess.run([y for y in [v,\".\",\".vulture_allowlist\" if Path(\".vulture_allowlist\").is_file() else \"\"] if y],capture_output=True,text=True).stdout.rstrip().splitlines()) if not x.startswith(\"# \")}): print(z)")'

      - name: Make sure LLVM is installed and look for available LLVM versions
        run: brew install llvm || true ; brew link --overwrite python@3.11 ; brew install llvm ; ls -l /opt/homebrew/Cellar/llvm/
      - name: Set macOS environment variables
        run: |
          echo "LLVM_CONFIG=/opt/homebrew/Cellar/llvm/$(pushd /opt/homebrew/Cellar/llvm/ > /dev/null ; ls -d */ | sed 's/.$//' ; popd > /dev/null;)/bin/llvm-config" >> $GITHUB_ENV ;
          echo "LLVM_SYMBOLIZER=/opt/homebrew/Cellar/llvm/$(pushd /opt/homebrew/Cellar/llvm/ > /dev/null ; ls -d */ | sed 's/.$//' ; popd > /dev/null;)/bin/llvm-symbolizer" >> $GITHUB_ENV ;
      - name: Set macOS llvm-config and llvm-symbolizer symlinks
        run: |
          sudo ln -s /opt/homebrew/Cellar/llvm/"$(pushd /opt/homebrew/Cellar/llvm/ > /dev/null ; ls -d */ | sed 's/.$//' ; popd > /dev/null;)"/bin/llvm-config /usr/local/bin/llvm-config ;
          sudo ln -s /opt/homebrew/Cellar/llvm/"$(pushd /opt/homebrew/Cellar/llvm/ > /dev/null ; ls -d */ | sed 's/.$//' ; popd > /dev/null;)"/bin/llvm-symbolizer /usr/local/bin/llvm-symbolizer ;
      - name: Check versions
        run: gcc --version; g++ --version; clang --version; clang++ --version; llvm-symbolizer --version; llvm-config --version
      - name: Install 32/64-bit SpiderMonkey prerequisites and forcibly overwrite existing brew issues when linking Python
        run: brew install autoconf@2.13 ccache gawk gnu-tar mercurial pkg-config python ripgrep zlib || true ; brew link --overwrite python@3.11 ; brew autoremove
      - name: Rustup latest 32/64-bit Rust, as it seems faster than Rust-related workflows
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path && source "$HOME"/.cargo/env && rustup target add i686-unknown-linux-gnu

      - name: Clone Mercurial mozilla-central repo as a stream, retrying in times of failure
        run: |
          mkdir -p "$HOME"/trees && hg --version -q ;
          until time hg clone --stream https://hg.mozilla.org/mozilla-central/ "$HOME"/trees/mozilla-central/ ; do
            echo "Error cloning m-c. Deleting its failed clone directory, then retrying in 2 seconds..." ;
            rm -rf "$HOME"/trees/mozilla-central/ ;
            sleep 2 ;
          done

      - name: Run tools using pytest under code coverage
        env:
          BUILDSM: ${{ matrix.build-type }}
        run: |
          python -u -m pytest --cov --mypy --pylint --ruff --ruff-format

      - name: Print the .busted log, if any, when any previous compile steps fail
        if: ${{ failure() }}
        run: tail -n 100 "$HOME"/shell-cache/*/*.busted*

      - name: Remove m-c to free up more space for tarball creation
        run: rm -rf "$HOME"/trees/mozilla-central/
      - name: Create a tarball and SHA-256 checksum
        run: pushd "$HOME"/shell-cache; for f in *; do [[ $f =~ "js-" ]] && time gtar -cpf - "$f" | zstd -T0 --long -19 > "$f".tar.zst && shasum -a 256 -b "$f".tar.zst | tee "$f".tar.zst.sha256; done; popd
      - name: Archive tarball and checksum # GitHub UI forces download as zipped (not gzipped) files, double-compressing even if files are already compressed
        uses: nth10sd/upload-artifact-as-is@v1
        with:
          path: "~/shell-cache/*.tar.zst*"
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          env_vars: OS,PYTHON
          fail_ci_if_error: true # optional (default = false)
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  Windows:
    runs-on: windows-2022 # If changing MSVC version, adjust destination folder for a .pdb file in autostart script
    strategy:
      fail-fast: false
      matrix:
        build-type: [
            # Empty space needed only for Win CI, will be .rstrip() later
            # The "" null string cannot seem to propagate properly from
            # PowerShell -> batch script -> bash
            " ",
            "--enable-address-sanitizer", # DllMain patch and bug 1802675 patch added
            "--enable-debug --disable-optimize",
            "--enable-debug --disable-optimize --enable-simulator=arm64",
            "--disable-debug --enable-simulator=arm64",
          ]
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      # - name: Get pip cache dir
      #   id: pip-cache
      #   run: echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      - name: pip cache
        uses: actions/cache@v4
        with:
          # 20221026 This only worked w/set-output in the pip cache dir step on Win
          # path: ${{ steps.pip-cache.outputs.dir }}
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Use deploy key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: |
            ${{ secrets.CRASH2COV_TOKEN }}
            ${{ secrets.ZZBASE_TOKEN }}

      - name: Install pip prerequisites
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: python -u -m pip install --upgrade pip setuptools wheel ;
      - name: Removing subdomain to make requirements.txt setup work in CI
        run: python -c 'import fileinput; [print(line.partition("git@")[0] + "git@github.com/" + line.partition(".github.com/")[-1] if (".github.com/" in line and not line.startswith("#")) else line, end="") for line in fileinput.input(inplace=True)]' requirements.txt ; git diff ;
      - name: Install requirements from possibly-changed requirements.txt
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: pip install -r requirements.txt ;
      - name: Revert requirements.txt if changed
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: git checkout -- requirements.txt ;
      - name: Install package in development mode
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: pip install --upgrade -e . ;

      - name: Run with ruff
        run: python -u -m ruff check .

      - name: Install prerequisites
        run: |
          while ($True) {
            try {
              choco upgrade ripgrep ; choco install mozillabuild sd-cli
              break
            } catch {
              echo "Error installing via choco, retrying in 2 seconds..." ;
              sleep 2 ;
            }
          }
      - name: Download WinPython (hardcoded version for MozillaBuild, separate from Python in GitHub Actions)
        run: |
          while ($True) {
            try {
              Invoke-WebRequest -Uri https://github.com/winpython/winpython/releases/download/5.0.20221030final/Winpython64-3.10.8.0dot.exe -OutFile C:\mozilla-build\winpython.exe
              break
            } catch {
              echo "Error downloading WinPython, retrying in 2 seconds..." ;
              sleep 2 ;
            }
          }
      - name: Verify WinPython hash checksum
        run: |
          if (-Not ((Get-FileHash -Algorithm SHA256 C:\mozilla-build\winpython.exe).Hash -eq "bd454f8df90d6ea6405780e6da71decb96ddfbbb0a5d5a33461203a7a5995651")) { throw ; }
      - name: Use 7-Zip to extract WinPython
        run: |
          & ${env:ProgramFiles}\7-Zip\7z.exe x C:\mozilla-build\winpython.exe "-oC:\mozilla-build\" -y
      - name: Remove WinPython installer
        run: rm C:\mozilla-build\winpython.exe
      - name: Remove Python from MozillaBuild
        run: rm C:\mozilla-build\python3 -r -fo
      - name: Move WinPython into the correct MozillaBuild location
        run: mv C:\mozilla-build\WPy64-*\python-*.amd64 C:\mozilla-build\python3
      - name: Remove remainder of WinPython
        run: rm C:\mozilla-build\WPy64-*\ -r -fo
      - name: Copy Python binary to python3.exe to make Mozilla build process happy
        run: cp C:\mozilla-build\python3\python.exe C:\mozilla-build\python3\python3.exe
      - name: Copy custom MozillaBuild autostart script to mozilla-build location
        run: cp scripts/mozillabuild/autostart.sh C:\mozilla-build\
      - name: Amend MozillaBuild start command
        run: |
          sd '%MOZILLABUILD%msys2\\msys2_shell.cmd -no-start -defterm -full-path %\*' '%MOZILLABUILD%msys2\msys2_shell.cmd -no-start -defterm -full-path %* -shell bash %MOZILLABUILD%autostart.sh ${{ matrix.build-type }}' C:\mozilla-build\start-shell.bat

      - name: Clone Mercurial mozilla-central repo as a stream, retrying in times of failure
        run: |
          mkdir -p $HOME/trees && hg --version -q ;
          while ($True) {
            try {
              hg clone --stream https://hg.mozilla.org/mozilla-central/ $HOME/trees/mozilla-central/
              break
            } catch {
              echo "Error cloning m-c. Deleting its failed clone directory, then retrying in 2 seconds..." ;
              rm $HOME/trees/mozilla-central/ -r -fo ;
              sleep 2 ;
            }
          }

      - name: Create deploy key file
        env:
          DEPLOY_KEY: ${{ secrets.ZZBASE_TOKEN }}
        run: echo "$env:DEPLOY_KEY" > ~/.ssh/id_ed25519_RO_zzbase
      - name: Convert deploy key CRLF to LF
        run: |
          ((Get-Content ~/.ssh/id_ed25519_RO_zzbase) -join "`n") + "`n" | Set-Content -NoNewline ~/.ssh/id_ed25519_RO_zzbase
      - name: Run tools using pytest under code coverage via MozillaBuild
        env:
          PYTEST_STATUS_FILE: "~/pytest-failure.txt"
        run: C:\mozilla-build\start-shell.bat ; if (Test-Path "$env:PYTEST_STATUS_FILE") { cat "$env:PYTEST_STATUS_FILE" ; throw }

      - name: Print the .busted log, if any, when any previous compile steps fail
        if: ${{ failure() }}
        run: cat $HOME/shell-cache/*/*.busted* -Tail 100

      # Removal of m-c, and creation of tarball and SHA-256 checksum happens in autostart.sh
      - name: Archive tarball and checksum # GitHub UI forces download as zipped (not gzipped) files, double-compressing even if files are already compressed
        uses: nth10sd/upload-artifact-as-is@v1
        with:
          path: "~/shell-cache/*.tar.zst*"
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          env_vars: OS,PYTHON
          fail_ci_if_error: true # optional (default = false)
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
