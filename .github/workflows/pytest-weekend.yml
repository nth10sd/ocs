# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: pytest-weekend

on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '5 10,22 * * 0,6'
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

### Copy to pytest-weekday.yml after this line ###
jobs:
  opt-64-asan-linux:
    runs-on: ubuntu-20.04  # Do not use matrix because if a build fails on one OS, it errors out the other as well
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get pip cache dir
      id: pip-cache
      run: echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Install pip dependencies
      if: steps.pip-cache.outputs.cache-hit != 'true'
      run: python -u -m pip install --upgrade pip setuptools wheel && python -u -m pip install -r requirements.txt '.[test]'

    - name: Set Linux environment variables
      run: echo ::set-env name=LLVM_CONFIG::/usr/lib/llvm-9/bin/llvm-config && echo ::set-env name=LLVM_SYMBOLIZER::/usr/lib/llvm-9/bin/llvm-symbolizer && echo ::set-env name=SHELL::/bin/bash
    - name: Set Linux llvm-config and llvm-symbolizer symlinks
      run: sudo ln -s /usr/lib/llvm-9/bin/llvm-config /usr/bin/llvm-config && sudo ln -s /usr/lib/llvm-9/bin/llvm-symbolizer /usr/bin/llvm-symbolizer
    - name: Check versions
      run: gcc --version; g++ --version; clang --version; clang++ --version; llvm-symbolizer --version; llvm-config --version
    - name: Install 32/64-bit SpiderMonkey prerequisites
      run: sudo apt-get install autoconf2.13 ccache g++-multilib lib32z1-dev libc6-dev-i386 libclang1-9 valgrind
    - name: Rustup latest 32/64-bit Rust, as it seems faster than Rust-related workflows
      run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path && source "$HOME"/.cargo/env && rustup target add i686-unknown-linux-gnu
    - name: Run with flake8 and pylint, and also non-slow tests, using pytest
      run: python -u -m pytest --flake8 --mypy --pylint -m "flake8 or mypy or pylint or not slow" --cov --cov-report term-missing --no-cov-on-fail --cov-fail-under=25
    - name: Clone Mercurial mozilla-central repo as a stream, retrying in times of failure
      run: |
        mkdir -p "$HOME"/trees && hg --version -q ;
        until time hg clone --stream https://hg.mozilla.org/mozilla-central/ "$HOME"/trees/mozilla-central/ ; do
          echo "Error cloning m-c. Deleting its failed clone directory, then retrying in 2 seconds..." ;
          rm -rf "$HOME"/trees/mozilla-central/ ;
          sleep 2 ;
        done

    - name: Compile a "--enable-address-sanitizer" build
      run: time python -u -m ocs.compile_shell -b "--enable-address-sanitizer"
    - name: Print the .busted log, if any, when any previous compile steps fail
      if: ${{ failure() }}
      run: tail -n 100 "$HOME"/shell-cache/*/*.busted*

    - name: Create a tarball and SHA-256 checksum
      run: pushd "$HOME"/shell-cache; for f in *; do [[ $f =~ "js-" ]] && time tar -cpf - "$f" | zstd -T0 --long -19 > "$f".tzst && shasum -a 256 -b "$f".tzst | tee "$f".tzst.sha256; done; popd
    - name: Archive tarball and checksum  # GitHub UI forces download as zipped (not gzipped) files, double-compressing even if files are already compressed
      uses: kittaakos/upload-artifact-as-is@v0
      with:
        path: '~/shell-cache/*.tzst*'
    - name: Upload coverage report to codecov
      if: ${{ success() }}
      run: bash <(curl -s https://codecov.io/bash)

  opt-64-vg-linux:
    runs-on: ubuntu-20.04  # Do not use matrix because if a build fails on one OS, it errors out the other as well
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get pip cache dir
      id: pip-cache
      run: echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Install pip dependencies
      if: steps.pip-cache.outputs.cache-hit != 'true'
      run: python -u -m pip install --upgrade pip setuptools wheel && python -u -m pip install -r requirements.txt '.[test]'

    - name: Set Linux environment variables
      run: echo ::set-env name=LLVM_CONFIG::/usr/lib/llvm-9/bin/llvm-config && echo ::set-env name=LLVM_SYMBOLIZER::/usr/lib/llvm-9/bin/llvm-symbolizer && echo ::set-env name=SHELL::/bin/bash
    - name: Set Linux llvm-config and llvm-symbolizer symlinks
      run: sudo ln -s /usr/lib/llvm-9/bin/llvm-config /usr/bin/llvm-config && sudo ln -s /usr/lib/llvm-9/bin/llvm-symbolizer /usr/bin/llvm-symbolizer
    - name: Check versions
      run: gcc --version; g++ --version; clang --version; clang++ --version; llvm-symbolizer --version; llvm-config --version
    - name: Install 32/64-bit SpiderMonkey prerequisites
      run: sudo apt-get install autoconf2.13 ccache g++-multilib lib32z1-dev libc6-dev-i386 libclang1-9 valgrind
    - name: Rustup latest 32/64-bit Rust, as it seems faster than Rust-related workflows
      run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path && source "$HOME"/.cargo/env && rustup target add i686-unknown-linux-gnu
    - name: Run with flake8 and pylint, and also non-slow tests, using pytest
      run: python -u -m pytest --flake8 --mypy --pylint -m "flake8 or mypy or pylint or not slow" --cov --cov-report term-missing --no-cov-on-fail --cov-fail-under=25
    - name: Clone Mercurial mozilla-central repo as a stream, retrying in times of failure
      run: |
        mkdir -p "$HOME"/trees && hg --version -q ;
        until time hg clone --stream https://hg.mozilla.org/mozilla-central/ "$HOME"/trees/mozilla-central/ ; do
          echo "Error cloning m-c. Deleting its failed clone directory, then retrying in 2 seconds..." ;
          rm -rf "$HOME"/trees/mozilla-central/ ;
          sleep 2 ;
        done

    - name: Compile a "--enable-valgrind" build
      run: time python -u -m ocs.compile_shell -b "--enable-valgrind"
    - name: Print the .busted log, if any, when any previous compile steps fail
      if: ${{ failure() }}
      run: tail -n 100 "$HOME"/shell-cache/*/*.busted*

    - name: Create a tarball and SHA-256 checksum
      run: pushd "$HOME"/shell-cache; for f in *; do [[ $f =~ "js-" ]] && time tar -cpf - "$f" | zstd -T0 --long -19 > "$f".tzst && shasum -a 256 -b "$f".tzst | tee "$f".tzst.sha256; done; popd
    - name: Archive tarball and checksum  # GitHub UI forces download as zipped (not gzipped) files, double-compressing even if files are already compressed
      uses: kittaakos/upload-artifact-as-is@v0
      with:
        path: '~/shell-cache/*.tzst*'
    - name: Upload coverage report to codecov
      if: ${{ success() }}
      run: bash <(curl -s https://codecov.io/bash)

  opt-64-linux:
    runs-on: ubuntu-20.04  # Do not use matrix because if a build fails on one OS, it errors out the other as well
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get pip cache dir
      id: pip-cache
      run: echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Install pip dependencies
      if: steps.pip-cache.outputs.cache-hit != 'true'
      run: python -u -m pip install --upgrade pip setuptools wheel && python -u -m pip install -r requirements.txt '.[test]'

    - name: Set Linux environment variables
      run: echo ::set-env name=LLVM_CONFIG::/usr/lib/llvm-9/bin/llvm-config && echo ::set-env name=LLVM_SYMBOLIZER::/usr/lib/llvm-9/bin/llvm-symbolizer && echo ::set-env name=SHELL::/bin/bash
    - name: Set Linux llvm-config and llvm-symbolizer symlinks
      run: sudo ln -s /usr/lib/llvm-9/bin/llvm-config /usr/bin/llvm-config && sudo ln -s /usr/lib/llvm-9/bin/llvm-symbolizer /usr/bin/llvm-symbolizer
    - name: Check versions
      run: gcc --version; g++ --version; clang --version; clang++ --version; llvm-symbolizer --version; llvm-config --version
    - name: Install 32/64-bit SpiderMonkey prerequisites
      run: sudo apt-get install autoconf2.13 ccache g++-multilib lib32z1-dev libc6-dev-i386 libclang1-9 valgrind
    - name: Rustup latest 32/64-bit Rust, as it seems faster than Rust-related workflows
      run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path && source "$HOME"/.cargo/env && rustup target add i686-unknown-linux-gnu
    - name: Run with flake8 and pylint, and also non-slow tests, using pytest
      run: python -u -m pytest --flake8 --mypy --pylint -m "flake8 or mypy or pylint or not slow" --cov --cov-report term-missing --no-cov-on-fail --cov-fail-under=25
    - name: Clone Mercurial mozilla-central repo as a stream, retrying in times of failure
      run: |
        mkdir -p "$HOME"/trees && hg --version -q ;
        until time hg clone --stream https://hg.mozilla.org/mozilla-central/ "$HOME"/trees/mozilla-central/ ; do
          echo "Error cloning m-c. Deleting its failed clone directory, then retrying in 2 seconds..." ;
          rm -rf "$HOME"/trees/mozilla-central/ ;
          sleep 2 ;
        done

    - name: Compile a "" build
      run: time python -u -m ocs.compile_shell
    - name: Print the .busted log, if any, when any previous compile steps fail
      if: ${{ failure() }}
      run: tail -n 100 "$HOME"/shell-cache/*/*.busted*

    - name: Create a tarball and SHA-256 checksum
      run: pushd "$HOME"/shell-cache; for f in *; do [[ $f =~ "js-" ]] && time tar -cpf - "$f" | zstd -T0 --long -19 > "$f".tzst && shasum -a 256 -b "$f".tzst | tee "$f".tzst.sha256; done; popd
    - name: Archive tarball and checksum  # GitHub UI forces download as zipped (not gzipped) files, double-compressing even if files are already compressed
      uses: kittaakos/upload-artifact-as-is@v0
      with:
        path: '~/shell-cache/*.tzst*'
    - name: Upload coverage report to codecov
      if: ${{ success() }}
      run: bash <(curl -s https://codecov.io/bash)

  dbg-optDisabled-64-dm-linux:
    runs-on: ubuntu-20.04  # Do not use matrix because if a build fails on one OS, it errors out the other as well
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get pip cache dir
      id: pip-cache
      run: echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Install pip dependencies
      if: steps.pip-cache.outputs.cache-hit != 'true'
      run: python -u -m pip install --upgrade pip setuptools wheel && python -u -m pip install -r requirements.txt '.[test]'

    - name: Set Linux environment variables
      run: echo ::set-env name=LLVM_CONFIG::/usr/lib/llvm-9/bin/llvm-config && echo ::set-env name=LLVM_SYMBOLIZER::/usr/lib/llvm-9/bin/llvm-symbolizer && echo ::set-env name=SHELL::/bin/bash
    - name: Set Linux llvm-config and llvm-symbolizer symlinks
      run: sudo ln -s /usr/lib/llvm-9/bin/llvm-config /usr/bin/llvm-config && sudo ln -s /usr/lib/llvm-9/bin/llvm-symbolizer /usr/bin/llvm-symbolizer
    - name: Check versions
      run: gcc --version; g++ --version; clang --version; clang++ --version; llvm-symbolizer --version; llvm-config --version
    - name: Install 32/64-bit SpiderMonkey prerequisites
      run: sudo apt-get install autoconf2.13 ccache g++-multilib lib32z1-dev libc6-dev-i386 libclang1-9 valgrind
    - name: Rustup latest 32/64-bit Rust, as it seems faster than Rust-related workflows
      run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path && source "$HOME"/.cargo/env && rustup target add i686-unknown-linux-gnu
    - name: Run with flake8 and pylint, and also non-slow tests, using pytest
      run: python -u -m pytest --flake8 --mypy --pylint -m "flake8 or mypy or pylint or not slow" --cov --cov-report term-missing --no-cov-on-fail --cov-fail-under=25
    - name: Clone Mercurial mozilla-central repo as a stream, retrying in times of failure
      run: |
        mkdir -p "$HOME"/trees && hg --version -q ;
        until time hg clone --stream https://hg.mozilla.org/mozilla-central/ "$HOME"/trees/mozilla-central/ ; do
          echo "Error cloning m-c. Deleting its failed clone directory, then retrying in 2 seconds..." ;
          rm -rf "$HOME"/trees/mozilla-central/ ;
          sleep 2 ;
        done

    - name: Compile a "--enable-debug --disable-optimize --enable-more-deterministic" build
      run: time python -u -m ocs.compile_shell -b "--enable-debug --disable-optimize --enable-more-deterministic"
    - name: Print the .busted log, if any, when any previous compile steps fail
      if: ${{ failure() }}
      run: tail -n 100 "$HOME"/shell-cache/*/*.busted*

    - name: Create a tarball and SHA-256 checksum
      run: pushd "$HOME"/shell-cache; for f in *; do [[ $f =~ "js-" ]] && time tar -cpf - "$f" | zstd -T0 --long -19 > "$f".tzst && shasum -a 256 -b "$f".tzst | tee "$f".tzst.sha256; done; popd
    - name: Archive tarball and checksum  # GitHub UI forces download as zipped (not gzipped) files, double-compressing even if files are already compressed
      uses: kittaakos/upload-artifact-as-is@v0
      with:
        path: '~/shell-cache/*.tzst*'
    - name: Upload coverage report to codecov
      if: ${{ success() }}
      run: bash <(curl -s https://codecov.io/bash)

  dbg-optDisabled-64-dm-armsim64-linux:
    runs-on: ubuntu-20.04  # Do not use matrix because if a build fails on one OS, it errors out the other as well
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get pip cache dir
      id: pip-cache
      run: echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Install pip dependencies
      if: steps.pip-cache.outputs.cache-hit != 'true'
      run: python -u -m pip install --upgrade pip setuptools wheel && python -u -m pip install -r requirements.txt '.[test]'

    - name: Set Linux environment variables
      run: echo ::set-env name=LLVM_CONFIG::/usr/lib/llvm-9/bin/llvm-config && echo ::set-env name=LLVM_SYMBOLIZER::/usr/lib/llvm-9/bin/llvm-symbolizer && echo ::set-env name=SHELL::/bin/bash
    - name: Set Linux llvm-config and llvm-symbolizer symlinks
      run: sudo ln -s /usr/lib/llvm-9/bin/llvm-config /usr/bin/llvm-config && sudo ln -s /usr/lib/llvm-9/bin/llvm-symbolizer /usr/bin/llvm-symbolizer
    - name: Check versions
      run: gcc --version; g++ --version; clang --version; clang++ --version; llvm-symbolizer --version; llvm-config --version
    - name: Install 32/64-bit SpiderMonkey prerequisites
      run: sudo apt-get install autoconf2.13 ccache g++-multilib lib32z1-dev libc6-dev-i386 libclang1-9 valgrind
    - name: Rustup latest 32/64-bit Rust, as it seems faster than Rust-related workflows
      run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path && source "$HOME"/.cargo/env && rustup target add i686-unknown-linux-gnu
    - name: Run with flake8 and pylint, and also non-slow tests, using pytest
      run: python -u -m pytest --flake8 --mypy --pylint -m "flake8 or mypy or pylint or not slow" --cov --cov-report term-missing --no-cov-on-fail --cov-fail-under=25
    - name: Clone Mercurial mozilla-central repo as a stream, retrying in times of failure
      run: |
        mkdir -p "$HOME"/trees && hg --version -q ;
        until time hg clone --stream https://hg.mozilla.org/mozilla-central/ "$HOME"/trees/mozilla-central/ ; do
          echo "Error cloning m-c. Deleting its failed clone directory, then retrying in 2 seconds..." ;
          rm -rf "$HOME"/trees/mozilla-central/ ;
          sleep 2 ;
        done

    - name: Compile a "--enable-debug --disable-optimize --enable-more-deterministic --enable-simulator=arm64" build
      run: time python -u -m ocs.compile_shell -b "--enable-debug --disable-optimize --enable-more-deterministic --enable-simulator=arm64"
    - name: Print the .busted log, if any, when any previous compile steps fail
      if: ${{ failure() }}
      run: tail -n 100 "$HOME"/shell-cache/*/*.busted*

    - name: Create a tarball and SHA-256 checksum
      run: pushd "$HOME"/shell-cache; for f in *; do [[ $f =~ "js-" ]] && time tar -cpf - "$f" | zstd -T0 --long -19 > "$f".tzst && shasum -a 256 -b "$f".tzst | tee "$f".tzst.sha256; done; popd
    - name: Archive tarball and checksum  # GitHub UI forces download as zipped (not gzipped) files, double-compressing even if files are already compressed
      uses: kittaakos/upload-artifact-as-is@v0
      with:
        path: '~/shell-cache/*.tzst*'
    - name: Upload coverage report to codecov
      if: ${{ success() }}
      run: bash <(curl -s https://codecov.io/bash)

  opt-32-linux:
    runs-on: ubuntu-20.04  # Do not use matrix because if a build fails on one OS, it errors out the other as well
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get pip cache dir
      id: pip-cache
      run: echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Install pip dependencies
      if: steps.pip-cache.outputs.cache-hit != 'true'
      run: python -u -m pip install --upgrade pip setuptools wheel && python -u -m pip install -r requirements.txt '.[test]'

    - name: Set Linux environment variables
      run: echo ::set-env name=LLVM_CONFIG::/usr/lib/llvm-9/bin/llvm-config && echo ::set-env name=LLVM_SYMBOLIZER::/usr/lib/llvm-9/bin/llvm-symbolizer && echo ::set-env name=SHELL::/bin/bash
    - name: Set Linux llvm-config and llvm-symbolizer symlinks
      run: sudo ln -s /usr/lib/llvm-9/bin/llvm-config /usr/bin/llvm-config && sudo ln -s /usr/lib/llvm-9/bin/llvm-symbolizer /usr/bin/llvm-symbolizer
    - name: Check versions
      run: gcc --version; g++ --version; clang --version; clang++ --version; llvm-symbolizer --version; llvm-config --version
    - name: Install 32/64-bit SpiderMonkey prerequisites
      run: sudo apt-get install autoconf2.13 ccache g++-multilib lib32z1-dev libc6-dev-i386 libclang1-9 valgrind
    - name: Rustup latest 32/64-bit Rust, as it seems faster than Rust-related workflows
      run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path && source "$HOME"/.cargo/env && rustup target add i686-unknown-linux-gnu
    - name: Run with flake8 and pylint, and also non-slow tests, using pytest
      run: python -u -m pytest --flake8 --mypy --pylint -m "flake8 or mypy or pylint or not slow" --cov --cov-report term-missing --no-cov-on-fail --cov-fail-under=25
    - name: Clone Mercurial mozilla-central repo as a stream, retrying in times of failure
      run: |
        mkdir -p "$HOME"/trees && hg --version -q ;
        until time hg clone --stream https://hg.mozilla.org/mozilla-central/ "$HOME"/trees/mozilla-central/ ; do
          echo "Error cloning m-c. Deleting its failed clone directory, then retrying in 2 seconds..." ;
          rm -rf "$HOME"/trees/mozilla-central/ ;
          sleep 2 ;
        done

    - name: Compile a "--32" build
      run: time python -u -m ocs.compile_shell -b "--32"
    - name: Print the .busted log, if any, when any previous compile steps fail
      if: ${{ failure() }}
      run: tail -n 100 "$HOME"/shell-cache/*/*.busted*

    - name: Create a tarball and SHA-256 checksum
      run: pushd "$HOME"/shell-cache; for f in *; do [[ $f =~ "js-" ]] && time tar -cpf - "$f" | zstd -T0 --long -19 > "$f".tzst && shasum -a 256 -b "$f".tzst | tee "$f".tzst.sha256; done; popd
    - name: Archive tarball and checksum  # GitHub UI forces download as zipped (not gzipped) files, double-compressing even if files are already compressed
      uses: kittaakos/upload-artifact-as-is@v0
      with:
        path: '~/shell-cache/*.tzst*'
    - name: Upload coverage report to codecov
      if: ${{ success() }}
      run: bash <(curl -s https://codecov.io/bash)

  dbg-optDisabled-32-dm-linux:
    runs-on: ubuntu-20.04  # Do not use matrix because if a build fails on one OS, it errors out the other as well
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get pip cache dir
      id: pip-cache
      run: echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Install pip dependencies
      if: steps.pip-cache.outputs.cache-hit != 'true'
      run: python -u -m pip install --upgrade pip setuptools wheel && python -u -m pip install -r requirements.txt '.[test]'

    - name: Set Linux environment variables
      run: echo ::set-env name=LLVM_CONFIG::/usr/lib/llvm-9/bin/llvm-config && echo ::set-env name=LLVM_SYMBOLIZER::/usr/lib/llvm-9/bin/llvm-symbolizer && echo ::set-env name=SHELL::/bin/bash
    - name: Set Linux llvm-config and llvm-symbolizer symlinks
      run: sudo ln -s /usr/lib/llvm-9/bin/llvm-config /usr/bin/llvm-config && sudo ln -s /usr/lib/llvm-9/bin/llvm-symbolizer /usr/bin/llvm-symbolizer
    - name: Check versions
      run: gcc --version; g++ --version; clang --version; clang++ --version; llvm-symbolizer --version; llvm-config --version
    - name: Install 32/64-bit SpiderMonkey prerequisites
      run: sudo apt-get install autoconf2.13 ccache g++-multilib lib32z1-dev libc6-dev-i386 libclang1-9 valgrind
    - name: Rustup latest 32/64-bit Rust, as it seems faster than Rust-related workflows
      run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path && source "$HOME"/.cargo/env && rustup target add i686-unknown-linux-gnu
    - name: Run with flake8 and pylint, and also non-slow tests, using pytest
      run: python -u -m pytest --flake8 --mypy --pylint -m "flake8 or mypy or pylint or not slow" --cov --cov-report term-missing --no-cov-on-fail --cov-fail-under=25
    - name: Clone Mercurial mozilla-central repo as a stream, retrying in times of failure
      run: |
        mkdir -p "$HOME"/trees && hg --version -q ;
        until time hg clone --stream https://hg.mozilla.org/mozilla-central/ "$HOME"/trees/mozilla-central/ ; do
          echo "Error cloning m-c. Deleting its failed clone directory, then retrying in 2 seconds..." ;
          rm -rf "$HOME"/trees/mozilla-central/ ;
          sleep 2 ;
        done

    - name: Compile a "--enable-debug --disable-optimize --enable-more-deterministic --32" build
      run: time python -u -m ocs.compile_shell -b "--enable-debug --disable-optimize --enable-more-deterministic --32"
    - name: Print the .busted log, if any, when any previous compile steps fail
      if: ${{ failure() }}
      run: tail -n 100 "$HOME"/shell-cache/*/*.busted*

    - name: Create a tarball and SHA-256 checksum
      run: pushd "$HOME"/shell-cache; for f in *; do [[ $f =~ "js-" ]] && time tar -cpf - "$f" | zstd -T0 --long -19 > "$f".tzst && shasum -a 256 -b "$f".tzst | tee "$f".tzst.sha256; done; popd
    - name: Archive tarball and checksum  # GitHub UI forces download as zipped (not gzipped) files, double-compressing even if files are already compressed
      uses: kittaakos/upload-artifact-as-is@v0
      with:
        path: '~/shell-cache/*.tzst*'
    - name: Upload coverage report to codecov
      if: ${{ success() }}
      run: bash <(curl -s https://codecov.io/bash)

  dbg-optDisabled-32-dm-armsim32-linux:
    runs-on: ubuntu-20.04  # Do not use matrix because if a build fails on one OS, it errors out the other as well
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get pip cache dir
      id: pip-cache
      run: echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Install pip dependencies
      if: steps.pip-cache.outputs.cache-hit != 'true'
      run: python -u -m pip install --upgrade pip setuptools wheel && python -u -m pip install -r requirements.txt '.[test]'

    - name: Set Linux environment variables
      run: echo ::set-env name=LLVM_CONFIG::/usr/lib/llvm-9/bin/llvm-config && echo ::set-env name=LLVM_SYMBOLIZER::/usr/lib/llvm-9/bin/llvm-symbolizer && echo ::set-env name=SHELL::/bin/bash
    - name: Set Linux llvm-config and llvm-symbolizer symlinks
      run: sudo ln -s /usr/lib/llvm-9/bin/llvm-config /usr/bin/llvm-config && sudo ln -s /usr/lib/llvm-9/bin/llvm-symbolizer /usr/bin/llvm-symbolizer
    - name: Check versions
      run: gcc --version; g++ --version; clang --version; clang++ --version; llvm-symbolizer --version; llvm-config --version
    - name: Install 32/64-bit SpiderMonkey prerequisites
      run: sudo apt-get install autoconf2.13 ccache g++-multilib lib32z1-dev libc6-dev-i386 libclang1-9 valgrind
    - name: Rustup latest 32/64-bit Rust, as it seems faster than Rust-related workflows
      run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path && source "$HOME"/.cargo/env && rustup target add i686-unknown-linux-gnu
    - name: Run with flake8 and pylint, and also non-slow tests, using pytest
      run: python -u -m pytest --flake8 --mypy --pylint -m "flake8 or mypy or pylint or not slow" --cov --cov-report term-missing --no-cov-on-fail --cov-fail-under=25
    - name: Clone Mercurial mozilla-central repo as a stream, retrying in times of failure
      run: |
        mkdir -p "$HOME"/trees && hg --version -q ;
        until time hg clone --stream https://hg.mozilla.org/mozilla-central/ "$HOME"/trees/mozilla-central/ ; do
          echo "Error cloning m-c. Deleting its failed clone directory, then retrying in 2 seconds..." ;
          rm -rf "$HOME"/trees/mozilla-central/ ;
          sleep 2 ;
        done

    - name: Compile a "--enable-debug --disable-optimize --enable-more-deterministic --enable-simulator=arm --32" build
      run: time python -u -m ocs.compile_shell -b "--enable-debug --disable-optimize --enable-more-deterministic --enable-simulator=arm --32"
    - name: Print the .busted log, if any, when any previous compile steps fail
      if: ${{ failure() }}
      run: tail -n 100 "$HOME"/shell-cache/*/*.busted*

    - name: Create a tarball and SHA-256 checksum
      run: pushd "$HOME"/shell-cache; for f in *; do [[ $f =~ "js-" ]] && time tar -cpf - "$f" | zstd -T0 --long -19 > "$f".tzst && shasum -a 256 -b "$f".tzst | tee "$f".tzst.sha256; done; popd
    - name: Archive tarball and checksum  # GitHub UI forces download as zipped (not gzipped) files, double-compressing even if files are already compressed
      uses: kittaakos/upload-artifact-as-is@v0
      with:
        path: '~/shell-cache/*.tzst*'
    - name: Upload coverage report to codecov
      if: ${{ success() }}
      run: bash <(curl -s https://codecov.io/bash)

  opt-64-darwin:
    runs-on: macos-10.15  # Do not use matrix because if a build fails on one OS, it errors out the other as well
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get pip cache dir
      id: pip-cache
      run: echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Install pip dependencies
      if: steps.pip-cache.outputs.cache-hit != 'true'
      run: python -u -m pip install --upgrade pip setuptools wheel && python -u -m pip install -r requirements.txt '.[test]'

    - name: Set macOS environment variables
      run: echo ::set-env name=LLVM_CONFIG::/usr/local/Cellar/llvm/10.0.0_3/bin/llvm-config && echo ::set-env name=LLVM_SYMBOLIZER::/usr/local/Cellar/llvm/10.0.0_3/bin/llvm-symbolizer
    - name: Set macOS llvm-config and llvm-symbolizer symlinks
      run: sudo ln -s /usr/local/Cellar/llvm/10.0.0_3/bin/llvm-config /usr/local/bin/llvm-config && sudo ln -s /usr/local/Cellar/llvm/10.0.0_3/bin/llvm-symbolizer /usr/local/bin/llvm-symbolizer
    - name: Check versions
      run: gcc --version; g++ --version; clang --version; clang++ --version; llvm-symbolizer --version; llvm-config --version
    - name: Install 32/64-bit SpiderMonkey prerequisites
      run: brew install autoconf@2.13 ccache gawk gnu-tar mercurial pkg-config python
    - name: Rustup latest 32/64-bit Rust, as it seems faster than Rust-related workflows
      run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path && source "$HOME"/.cargo/env && rustup target add i686-unknown-linux-gnu
    - name: Run with flake8 and pylint, and also non-slow tests, using pytest
      run: python -u -m pytest --flake8 --mypy --pylint -m "flake8 or mypy or pylint or not slow" --cov --cov-report term-missing --no-cov-on-fail --cov-fail-under=25
    - name: Clone Mercurial mozilla-central repo as a stream, retrying in times of failure
      run: |
        mkdir -p "$HOME"/trees && hg --version -q ;
        until time hg clone --stream https://hg.mozilla.org/mozilla-central/ "$HOME"/trees/mozilla-central/ ; do
          echo "Error cloning m-c. Deleting its failed clone directory, then retrying in 2 seconds..." ;
          rm -rf "$HOME"/trees/mozilla-central/ ;
          sleep 2 ;
        done

    - name: Compile a "" build
      run: time python -u -m ocs.compile_shell
    - name: Print the .busted log, if any, when any previous compile steps fail
      if: ${{ failure() }}
      run: tail -n 100 "$HOME"/shell-cache/*/*.busted*

    - name: Create a tarball and SHA-256 checksum
      run: pushd "$HOME"/shell-cache; for f in *; do [[ $f =~ "js-" ]] && time gtar -cpf - "$f" | zstd -T0 --long -19 > "$f".tzst && shasum -a 256 -b "$f".tzst | tee "$f".tzst.sha256; done; popd
    - name: Archive tarball and checksum  # GitHub UI forces download as zipped (not gzipped) files, double-compressing even if files are already compressed
      uses: kittaakos/upload-artifact-as-is@v0
      with:
        path: '~/shell-cache/*.tzst*'
    - name: Upload coverage report to codecov
      if: ${{ success() }}
      run: bash <(curl -s https://codecov.io/bash)

  dbg-optDisabled-64-dm-darwin:
    runs-on: macos-10.15  # Do not use matrix because if a build fails on one OS, it errors out the other as well
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get pip cache dir
      id: pip-cache
      run: echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Install pip dependencies
      if: steps.pip-cache.outputs.cache-hit != 'true'
      run: python -u -m pip install --upgrade pip setuptools wheel && python -u -m pip install -r requirements.txt '.[test]'

    - name: Set macOS environment variables
      run: echo ::set-env name=LLVM_CONFIG::/usr/local/Cellar/llvm/10.0.0_3/bin/llvm-config && echo ::set-env name=LLVM_SYMBOLIZER::/usr/local/Cellar/llvm/10.0.0_3/bin/llvm-symbolizer
    - name: Set macOS llvm-config and llvm-symbolizer symlinks
      run: sudo ln -s /usr/local/Cellar/llvm/10.0.0_3/bin/llvm-config /usr/local/bin/llvm-config && sudo ln -s /usr/local/Cellar/llvm/10.0.0_3/bin/llvm-symbolizer /usr/local/bin/llvm-symbolizer
    - name: Check versions
      run: gcc --version; g++ --version; clang --version; clang++ --version; llvm-symbolizer --version; llvm-config --version
    - name: Install 32/64-bit SpiderMonkey prerequisites
      run: brew install autoconf@2.13 ccache gawk gnu-tar mercurial pkg-config python
    - name: Rustup latest 32/64-bit Rust, as it seems faster than Rust-related workflows
      run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path && source "$HOME"/.cargo/env && rustup target add i686-unknown-linux-gnu
    - name: Run with flake8 and pylint, and also non-slow tests, using pytest
      run: python -u -m pytest --flake8 --mypy --pylint -m "flake8 or mypy or pylint or not slow" --cov --cov-report term-missing --no-cov-on-fail --cov-fail-under=25
    - name: Clone Mercurial mozilla-central repo as a stream, retrying in times of failure
      run: |
        mkdir -p "$HOME"/trees && hg --version -q ;
        until time hg clone --stream https://hg.mozilla.org/mozilla-central/ "$HOME"/trees/mozilla-central/ ; do
          echo "Error cloning m-c. Deleting its failed clone directory, then retrying in 2 seconds..." ;
          rm -rf "$HOME"/trees/mozilla-central/ ;
          sleep 2 ;
        done

    - name: Compile a "--enable-debug --disable-optimize --enable-more-deterministic" build
      run: time python -u -m ocs.compile_shell -b "--enable-debug --disable-optimize --enable-more-deterministic"
    - name: Print the .busted log, if any, when any previous compile steps fail
      if: ${{ failure() }}
      run: tail -n 100 "$HOME"/shell-cache/*/*.busted*

    - name: Create a tarball and SHA-256 checksum
      run: pushd "$HOME"/shell-cache; for f in *; do [[ $f =~ "js-" ]] && time gtar -cpf - "$f" | zstd -T0 --long -19 > "$f".tzst && shasum -a 256 -b "$f".tzst | tee "$f".tzst.sha256; done; popd
    - name: Archive tarball and checksum  # GitHub UI forces download as zipped (not gzipped) files, double-compressing even if files are already compressed
      uses: kittaakos/upload-artifact-as-is@v0
      with:
        path: '~/shell-cache/*.tzst*'
    - name: Upload coverage report to codecov
      if: ${{ success() }}
      run: bash <(curl -s https://codecov.io/bash)

  dbg-optDisabled-64-dm-armsim64-darwin:
    runs-on: macos-10.15  # Do not use matrix because if a build fails on one OS, it errors out the other as well
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get pip cache dir
      id: pip-cache
      run: echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Install pip dependencies
      if: steps.pip-cache.outputs.cache-hit != 'true'
      run: python -u -m pip install --upgrade pip setuptools wheel && python -u -m pip install -r requirements.txt '.[test]'

    - name: Set macOS environment variables
      run: echo ::set-env name=LLVM_CONFIG::/usr/local/Cellar/llvm/10.0.0_3/bin/llvm-config && echo ::set-env name=LLVM_SYMBOLIZER::/usr/local/Cellar/llvm/10.0.0_3/bin/llvm-symbolizer
    - name: Set macOS llvm-config and llvm-symbolizer symlinks
      run: sudo ln -s /usr/local/Cellar/llvm/10.0.0_3/bin/llvm-config /usr/local/bin/llvm-config && sudo ln -s /usr/local/Cellar/llvm/10.0.0_3/bin/llvm-symbolizer /usr/local/bin/llvm-symbolizer
    - name: Check versions
      run: gcc --version; g++ --version; clang --version; clang++ --version; llvm-symbolizer --version; llvm-config --version
    - name: Install 32/64-bit SpiderMonkey prerequisites
      run: brew install autoconf@2.13 ccache gawk gnu-tar mercurial pkg-config python
    - name: Rustup latest 32/64-bit Rust, as it seems faster than Rust-related workflows
      run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path && source "$HOME"/.cargo/env && rustup target add i686-unknown-linux-gnu
    - name: Run with flake8 and pylint, and also non-slow tests, using pytest
      run: python -u -m pytest --flake8 --mypy --pylint -m "flake8 or mypy or pylint or not slow" --cov --cov-report term-missing --no-cov-on-fail --cov-fail-under=25
    - name: Clone Mercurial mozilla-central repo as a stream, retrying in times of failure
      run: |
        mkdir -p "$HOME"/trees && hg --version -q ;
        until time hg clone --stream https://hg.mozilla.org/mozilla-central/ "$HOME"/trees/mozilla-central/ ; do
          echo "Error cloning m-c. Deleting its failed clone directory, then retrying in 2 seconds..." ;
          rm -rf "$HOME"/trees/mozilla-central/ ;
          sleep 2 ;
        done

    - name: Compile a "--enable-debug --disable-optimize --enable-more-deterministic --enable-simulator=arm64" build
      run: time python -u -m ocs.compile_shell -b "--enable-debug --disable-optimize --enable-more-deterministic --enable-simulator=arm64"
    - name: Print the .busted log, if any, when any previous compile steps fail
      if: ${{ failure() }}
      run: tail -n 100 "$HOME"/shell-cache/*/*.busted*

    - name: Create a tarball and SHA-256 checksum
      run: pushd "$HOME"/shell-cache; for f in *; do [[ $f =~ "js-" ]] && time gtar -cpf - "$f" | zstd -T0 --long -19 > "$f".tzst && shasum -a 256 -b "$f".tzst | tee "$f".tzst.sha256; done; popd
    - name: Archive tarball and checksum  # GitHub UI forces download as zipped (not gzipped) files, double-compressing even if files are already compressed
      uses: kittaakos/upload-artifact-as-is@v0
      with:
        path: '~/shell-cache/*.tzst*'
    - name: Upload coverage report to codecov
      if: ${{ success() }}
      run: bash <(curl -s https://codecov.io/bash)
