from ocs import build_options as build_options, inspect_shell as inspect_shell
from ocs.util import file_system_helpers as file_system_helpers, hg_helpers as hg_helpers, sm_compile_helpers as sm_compile_helpers, utils as utils
from pathlib import Path
from typing import Any, List, Optional

MAKE_BINARY: str
CLANG_VER: str
WIN_MOZBUILD_CLANG_PATH: Any
SSE2_FLAGS: str
COMPILATION_JOBS: Any

class CompiledShellError(Exception): ...

class CompiledShell:
    shell_name_without_ext: Any = ...
    hg_hash: Any = ...
    build_opts: Any = ...
    js_objdir: Any = ...
    cfg: Any = ...
    added_env: str = ...
    full_env: str = ...
    js_cfg_file: Any = ...
    js_version: str = ...
    def __init__(self, build_opts: Any, hg_hash: str) -> None: ...
    @classmethod
    def main(cls: Any, args: Any=...) -> Any: ...
    @staticmethod
    def run(argv: Any=...) -> Any: ...
    def get_cfg_cmd_excl_env(self) -> List[str]: ...
    def set_cfg_cmd_excl_env(self, cfg: List[str]) -> None: ...
    def set_env_added(self, added_env: Any) -> None: ...
    def get_env_added(self) -> Any: ...
    def set_env_full(self, full_env: Any) -> None: ...
    def get_env_full(self) -> Any: ...
    def get_hg_hash(self) -> str: ...
    def get_js_cfg_path(self) -> Path: ...
    def get_js_objdir(self) -> Path: ...
    def set_js_objdir(self, objdir: Path) -> None: ...
    def get_repo_dir(self) -> Any: ...
    def get_repo_name(self) -> str: ...
    def get_shell_cache_dir(self) -> Path: ...
    def get_shell_cache_js_bin_path(self) -> Path: ...
    def get_shell_compiled_path(self) -> Path: ...
    def get_shell_compiled_runlibs_path(self) -> List[Path]: ...
    def get_shell_name_with_ext(self) -> str: ...
    def get_shell_name_without_ext(self) -> str: ...
    def get_version(self) -> str: ...
    def set_version(self, js_version: str) -> None: ...

def configure_js_shell_compile(shell: Any) -> None: ...
def configure_binary(shell: Any) -> None: ...
def env_dump(shell: CompiledShell, log_: Path) -> None: ...
def sm_compile(shell: Any) -> Any: ...
def obtain_shell(shell: Any, update_to_rev: Optional[str]=..., _update_latest_txt: bool=...) -> None: ...
def main() -> None: ...
